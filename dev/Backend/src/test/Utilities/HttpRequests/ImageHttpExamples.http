### Solve
POST http://localhost:4000/user/{{userId}}/image/{{imageId}}/solver/t={{timeout}}

### Solve Bad
POST http://localhost:4000/user/{{userId}}/image/{{imageIdBad}}/solver/t={{timeout}}

### Fetch Images
GET http://localhost:4000/image/view/0

### Publish Image
PATCH http://localhost:4000/user/{{userId}}/image/{{imageId}}/publish

### Add Published Image to User
PATCH http://localhost:4000/user/{{userId}}/image/{{publishedImage}}/get

### Get User Images
GET  http://localhost:4000/user/{{userId}}/image/{{page}}


### Parse Model
POST http://localhost:4000/user/{{userId}}/image/model
Content-Type: application/json

{
  "code": "param x := 2;\r\nset mySet := {1,2,3};\r\n\r\nvar myVar[mySet];\r\n\r\nsubto sampleConstraint:\r\n    myVar[x] == mySet[1];\r\n\r\nmaximize myObjective:\r\n                    1;"
}

### Parse Model 2
POST http://localhost:4000/user/{{userId}}/image/model
Content-Type: application/json

{
  "code": "param weight := 10;\r\nparam absoluteMinimalSpacing := 8;\r\nparam soldiers := 10;\r\n\r\n\r\n#set C := {1 .. soldiers};\r\n\r\nset C := {\"Ben\",\"Dan\",\"Ron\",\"Nir\",\"Niv\",\"Avi\",\"Shlomo\"};\r\nset Stations := {\"Shin Gimel\", \"Fillbox\"};\r\n#Hours from 0:00 to 20:00 in 4 hour intervals\r\nset Times := {0,4,8,12,16,20};\r\nset S := Stations * Times;\r\nset Possible_Soldier_Shifts := C * S; # [<Ben, <Fillbox, 4>> , <Ron, 8>]\r\nset Possible_Transitions := {<i,a,b,c,d> in C * S * S | b < d };\r\n\r\nvar Soldier_Shift[Possible_Soldier_Shifts] binary;\r\nvar Soldier_Transitions[Possible_Transitions] binary;\r\n\r\n\r\nsubto trivial1:\r\n    forall <j,a1,a2,b1,b2> in Possible_Transitions | a1 != b1 or a2 != b2 : vif Soldier_Transitions[j,a1,a2,b1,b2] == 1 then Soldier_Shift[j,a1,a2] == 1  end;\r\n\r\nsubto trivial2:\r\n    forall <j,a1,a2,b1,b2> in Possible_Transitions | a1 != b1 or a2 != b2 : vif Soldier_Transitions[j,a1,a2,b1,b2] == 1 then Soldier_Shift[j,a1,a2] == Soldier_Shift[j,b1,b2]  end;\r\n\r\nsubto trivial3:\r\n    forall <i,a,b> in Possible_Soldier_Shifts | b < max(Times): vif Soldier_Shift[i,a,b] == 1 and (sum<k,m,n> in Possible_Soldier_Shifts| k==i and n > b: Soldier_Shift[k,m,n]) >= 1 then sum <j,a1,a2,b1,b2> in Possible_Transitions | i == j and (a==a1 and b==a2) : Soldier_Transitions[j,a1,a2,b1,b2] == 1 end;\r\n\r\nsubto trivial4:\r\n    forall <i,a,b> in Possible_Soldier_Shifts | b > min(Times): vif Soldier_Shift[i,a,b] == 1 and (sum<k,m,n> in Possible_Soldier_Shifts| k==i and n < b: Soldier_Shift[k,m,n]) >= 1 then sum <j,a1,a2,b1,b2> in Possible_Transitions | i == j and (a==b1 and b==b2) : Soldier_Transitions[j,a1,a2,b1,b2] == 1 end;\r\n\r\nsubto trivial5:\r\n    forall <j,a1,a2,b1,b2> in Possible_Transitions | a1 != b1 or a2 != b2 : Soldier_Transitions[j,a1,a2,b1,b2] == Soldier_Transitions[j,a1,a2,b1,b2] *((sum <m,n> in S | n > a2 and n < b2: Soldier_Shift[j,m,n]) + 1);\r\n\r\nsubto Soldier_Not_In_Two_Stations_Concurrently:\r\n    forall <i,t,z> in Possible_Soldier_Shifts : ( sum<m,a,b> in Possible_Soldier_Shifts | m == i and z == b : Soldier_Shift[i,a,b]) <= 1;\r\n\r\nsubto All_Stations_One_Soldier:\r\n    forall <s,f> in S: (sum<a,b,c> in Possible_Soldier_Shifts | s==b and f==c: Soldier_Shift[a,b,c]) == 1;\r\n\r\nvar minGuards integer  >= 0 <= 5 priority 2 startval 1;\r\nvar maxGuards integer >= 1 <= 7 priority 4 startval 2;\r\nvar minimalSpacing integer >= absoluteMinimalSpacing <= absoluteMinimalSpacing+4 priority 12 startval 12;\r\n\r\nsubto minGuardsCons:\r\n    forall <i> in C: (sum <m,a,b> in Possible_Soldier_Shifts | i==m : Soldier_Shift[m,a,b]) >= minGuards;\r\n\r\nsubto maxGuardsCons:\r\n    forall <i> in C: (sum <m,a,b> in Possible_Soldier_Shifts | i==m : Soldier_Shift[m,a,b]) <= maxGuards;\r\n\r\nsubto minimalSpacingCons:\r\n    forall <i,a,b,c,d> in Possible_Transitions: vif (d-b) < minimalSpacing then Soldier_Transitions[i,a,b,c,d] == 0 end;\r\n\r\nminimize Spacing:\r\n    ((maxGuards-minGuards)+weight)**3 -\r\n    (minimalSpacing)**2 +\r\n    sum<i,a,b> in Possible_Soldier_Shifts: sum<m,n> in S | m != a or b!=n :(Soldier_Shift[i,a,b] * Soldier_Shift[i,m,n] * (b-n));\r\n"
}

### Create Image
POST http://localhost:4000/user/{{userId}}/image
Content-Type: application/json

{
  "variables": [
    {
      "identifier": "Soldier_Shift",
      "structure": ["TEXT","TEXT","INT"],
      "alias": "Shifts alias"
    }
  ],
  "constraintModules": [
    {
      "moduleName": "module1",
      "description": "description example",
      "constraints": [
        "Soldier_Not_In_Two_Stations_Concurrently"
      ]
    }
  ],
  "preferenceModules": [

  ],
  "sets": [
    {
      "setDefinition": {
        "name": "Stations",
        "type": ["TEST"]
      },
      "values": ["Station1", "Station2"]
    }
  ],
  "parameters": [
    {
      "parameterDefinition": {
        "name": "soldiers",
        "type": "INT"
      },
      "value": "10"
    }
  ],
  "name": "test image",
  "description" : "test desc",
  "code": "param weight := 10;\r\nparam absoluteMinimalSpacing := 8;\r\nparam soldiers := 1;\r\n\r\n\r\n#set C := {1 .. soldiers};\r\n\r\nset C := {\"Ben\",\"Dan\",\"Ron\",\"Nir\",\"Niv\",\"Avi\",\"Shlomo\"};\r\nset Stations := {\"Shin Gimel\", \"Fillbox\"};\r\n#Hours from 0:00 to 20:00 in 4 hour intervals\r\nset Times := {0,4,8,12,16,20};\r\nset S := Stations * Times;\r\nset Possible_Soldier_Shifts := C * S; # [<Ben, <Fillbox, 4>> , <Ron, 8>]\r\nset Possible_Transitions := {<i,a,b,c,d> in C * S * S | b < d };\r\n\r\nvar Soldier_Shift[Possible_Soldier_Shifts] binary;\r\nvar Soldier_Transitions[Possible_Transitions] binary;\r\n\r\n\r\nsubto trivial1:\r\n    forall <j,a1,a2,b1,b2> in Possible_Transitions | a1 != b1 or a2 != b2 : vif Soldier_Transitions[j,a1,a2,b1,b2] == 1 then Soldier_Shift[j,a1,a2] == 1  end;\r\n\r\nsubto trivial2:\r\n    forall <j,a1,a2,b1,b2> in Possible_Transitions | a1 != b1 or a2 != b2 : vif Soldier_Transitions[j,a1,a2,b1,b2] == 1 then Soldier_Shift[j,a1,a2] == Soldier_Shift[j,b1,b2]  end;\r\n\r\nsubto trivial3:\r\n    forall <i,a,b> in Possible_Soldier_Shifts | b < max(Times): vif Soldier_Shift[i,a,b] == 1 and (sum<k,m,n> in Possible_Soldier_Shifts| k==i and n > b: Soldier_Shift[k,m,n]) >= 1 then sum <j,a1,a2,b1,b2> in Possible_Transitions | i == j and (a==a1 and b==a2) : Soldier_Transitions[j,a1,a2,b1,b2] == 1 end;\r\n\r\nsubto trivial4:\r\n    forall <i,a,b> in Possible_Soldier_Shifts | b > min(Times): vif Soldier_Shift[i,a,b] == 1 and (sum<k,m,n> in Possible_Soldier_Shifts| k==i and n < b: Soldier_Shift[k,m,n]) >= 1 then sum <j,a1,a2,b1,b2> in Possible_Transitions | i == j and (a==b1 and b==b2) : Soldier_Transitions[j,a1,a2,b1,b2] == 1 end;\r\n\r\nsubto trivial5:\r\n    forall <j,a1,a2,b1,b2> in Possible_Transitions | a1 != b1 or a2 != b2 : Soldier_Transitions[j,a1,a2,b1,b2] == Soldier_Transitions[j,a1,a2,b1,b2] *((sum <m,n> in S | n > a2 and n < b2: Soldier_Shift[j,m,n]) + 1);\r\n\r\nsubto Soldier_Not_In_Two_Stations_Concurrently:\r\n    forall <i,t,z> in Possible_Soldier_Shifts : ( sum<m,a,b> in Possible_Soldier_Shifts | m == i and z == b : Soldier_Shift[i,a,b]) <= 1;\r\n\r\nsubto All_Stations_One_Soldier:\r\n    forall <s,f> in S: (sum<a,b,c> in Possible_Soldier_Shifts | s==b and f==c: Soldier_Shift[a,b,c]) == 1;\r\n\r\nvar minGuards integer  >= 0 <= 5 priority 2 startval 1;\r\nvar maxGuards integer >= 1 <= 7 priority 4 startval 2;\r\nvar minimalSpacing integer >= absoluteMinimalSpacing <= absoluteMinimalSpacing+4 priority 12 startval 12;\r\n\r\nsubto minGuardsCons:\r\n    forall <i> in C: (sum <m,a,b> in Possible_Soldier_Shifts | i==m : Soldier_Shift[m,a,b]) >= minGuards;\r\n\r\nsubto maxGuardsCons:\r\n    forall <i> in C: (sum <m,a,b> in Possible_Soldier_Shifts | i==m : Soldier_Shift[m,a,b]) <= maxGuards;\r\n\r\nsubto minimalSpacingCons:\r\n    forall <i,a,b,c,d> in Possible_Transitions: vif (d-b) < minimalSpacing then Soldier_Transitions[i,a,b,c,d] == 0 end;\r\n\r\nminimize Spacing:\r\n    ((maxGuards-minGuards)+weight)**3 -\r\n    (minimalSpacing)**2 +\r\n    sum<i,a,b> in Possible_Soldier_Shifts: sum<m,n> in S | m != a or b!=n :(Soldier_Shift[i,a,b] * Soldier_Shift[i,m,n] * (b-n));\r\n"
}


### Create Image
POST http://localhost:4000/user/{{userId}}/image
Content-Type: application/json

{
  "variables": [
    {
      "identifier": "myVar",
      "structure": ["INT"],
      "alias": "Bob Jones's's's var"
    }
  ],
  "constraintModules": [
    {
      "moduleName": "module1",
      "description": "description example",
      "constraints": [
        "sampleConstraint"
      ]
    }
  ],
  "preferenceModules": [
    {
      "moduleName": "module2",
      "description": "pref description example",
      "preferences": [
        "(1) * scalar49"
      ]
    }
  ],
  "sets": [
    {
      "setDefinition": {
        "name": "mySet",
        "type": ["INT"]
      },
      "values": ["3", "1", "2"]
    }
  ],
  "parameters": [
    {
      "parameterDefinition": {
        "name": "x",
        "type": "INT"
      },
      "value": "10"
    }
  ],
  "name": "test image",
  "description" : "test desc",
  "code": "param x := 2;\r\nset mySet := {1,2,3};\r\n\r\nvar myVar[mySet];\r\n\r\nsubto sampleConstraint:\r\n    myVar[x] == mySet[1];\r\n\r\nmaximize myObjective:\r\n                    1;"
}
