spring.application.name=artifactid
server.port = 4000
app.file.storage-dir=../User/Models

spring.datasource.url=jdbc:postgresql://postgres:5432/solvinerydb
spring.datasource.username=dbuser
spring.datasource.password=devpassword123

#Enable SQL debugging
spring.jpa.show-sql=true

#Makes SQL logs more readable
spring.jpa.properties.hibernate.format_sql=true

# JPA and Hibernate settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Enable Hibernate validation
spring.jpa.properties.javax.persistence.validation.mode=auto


# Enable detailed Hibernate statistics
spring.jpa.properties.hibernate.generate_statistics=true

# Set Hibernate logging level to DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.hibernate.type.descriptor.sql=TRACE

# Set transaction logging to TRACE
logging.level.org.springframework.transaction=TRACE
logging.level.org.hibernate.engine.transaction.internal.TransactionImpl=DEBUG

# Enable detailed JPA logging
logging.level.org.springframework.orm.jpa=DEBUG
logging.level.org.springframework.transaction.interceptor=TRACE

# Kafka Configuration
spring.kafka.bootstrap-servers=kafka:29092
spring.kafka.consumer.group-id=problem-solving-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.properties.spring.json.trusted.packages=*
#amount of time between alive signal before consumer assumed dead
spring.kafka.consumer.properties.max.poll.interval.ms=300000
#interval between alive signals
spring.kafka.consumer.heartbeat-interval=3000

# Kafka producer configuration for JSON
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Kafka consumer configuration for JSON
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# How to use: in intellij, in edit configurations in active profiles type the required profile.
# for example, to use application-local.properties, type: "local".
# Use local when running server on local machine, localDocker if server is running from a docker
# and remote once I set up a remote server with an ip.
# All the properties in this file are *always* read, no matter the profile.
# Note that using one of the locals will require you to set up a local postgresql server on the local machine.